name: React Native CI

on:
  push:
    branches: [main]
    paths-ignore:
      - '**.md'
      - 'LICENSE'
      - 'docs/**'
  pull_request:
    branches: [main]
  workflow_dispatch:
    inputs:
      buildType:
        type: choice
        description: 'Build type to run'
        options:
          - prod-apk
          - prod-aab
          - ios-prod
          - publish-stores
          - all
      platform:
        type: choice
        description: 'Platform to build'
        default: 'all'
        options:
          - android
          - ios
          - all
jobs:
  check-skip:
    runs-on: ubuntu-latest
    if: "!contains(github.event.head_commit.message, '[skip ci]')"
    steps:
      - name: Skip CI check
        run: echo "Proceeding with workflow"
  test:
    needs: check-skip
    runs-on: ubuntu-latest
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Get npm cache directory path
        id: npm-cache-dir-path
        run: echo "dir=$(npm cache dir)" >> $GITHUB_OUTPUT

      - name: 📦 Setup npm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 📦 Install dependencies
        run: npm install

      - name: 🧹 Run ESLint
        run: npm run lint

  build-and-deploy:
    needs: test
    if: (github.event_name == 'push' && github.ref == 'refs/heads/main') || github.event_name == 'workflow_dispatch'
    strategy:
      matrix:
        platform: [android]
        include:
          - platform: ios
            runs-on: macos-latest
    runs-on: ${{ matrix.platform == 'ios' && 'macos-latest' || 'ubuntu-latest' }}
    steps:
      - name: 🏗 Checkout repository
        uses: actions/checkout@v4

      - name: 🏗 Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'

      - name: 📦 Install yarn
        run: npm install -g yarn

      - name: 📦 Get npm cache directory path
        id: npm-cache-dir-path
        run: echo "dir=$(npm cache dir)" >> $GITHUB_OUTPUT

      - name: 📦 Setup npm cache
        uses: actions/cache@v3
        with:
          path: ${{ steps.npm-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
          restore-keys: |
            ${{ runner.os }}-npm-

      - name: 📦 Install dependencies
        run: npm install

      - name: Decode Android keystore
        run: |
          echo $ANDROID_KEYSTORE_BASE64 | base64 -d > android/app/my-release-key.keystore
        env:
          ANDROID_KEYSTORE_BASE64: ${{ secrets.ANDROID_KEYSTORE_BASE64 }}
      - name: Create android/gradle.properties with signing config
        run: |
          cat <<EOF >> android/gradle.properties
          MYAPP_UPLOAD_STORE_FILE=my-release-key.keystore
          MYAPP_UPLOAD_STORE_PASSWORD=${{ secrets.ANDROID_KEYSTORE_PASSWORD }}
          MYAPP_UPLOAD_KEY_ALIAS=${{ secrets.ANDROID_KEY_ALIAS }}
          MYAPP_UPLOAD_KEY_PASSWORD=${{ secrets.ANDROID_KEY_PASSWORD }}
          EOF
      - name: Build Android release
        run: |
          cd android
          ./gradlew assembleRelease
      - name: Upload Android release
        uses: actions/upload-artifact@v4
        with:
          name: android-release
          path: android/app/build/outputs/apk/release/app-release.apk
